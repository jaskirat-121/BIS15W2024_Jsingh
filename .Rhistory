fluidRow(
box(
selectInput("x", "Select X Variable", choices = c("Academic_Yr", "Campus", "Category"), selected = "Academic_Yr"),
),
box(
plotOutput("plot", width = "500px", height = "400px")
)
)
)
ui <- dashboardPage(
ui <- dashboardPage(
dashboardHeader(title="UC_admissions"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(
selectInput("x", "Select X Variable", choices = c("Academic_Yr", "Campus", "Category"), selected = "Academic_Yr"),
),
box(
plotOutput("plot", width = "500px", height = "400px")
)
)
)
server <- function(input, output, session) {
ui <- dashboardPage(
dashboardHeader(title="UC_admissions"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(
selectInput("x", "Select X Variable", choices = c("Academic_Yr", "Campus", "Category"), selected = "Academic_Yr"),
),
box(
plotOutput("plot", width = "500px", height = "400px"))
)
)
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
wolves <- read_csv("data/wolves_data/wolves_dataset.csv")
ui <- dashboardPage(
dashboardHeader(title="Sex composition by wolf population"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(width=3,
selectInput('x','Select population', choices=unique(wolves$pop)), hr()
),
box(width=7,
plotOutput("plot", width = "500px", height = "400px"))
)
)
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
wolves %>%
filter(sex != "NA") %>%
filter(pop=input$x) %>%
ggplot(aes(x=sex, fill=sex))+
geom_bar()
})
}
shinyApp(ui, server)
View(UC_admit)
ui <- dashboardPage(
dashboardHeader(title="UC_admissions"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(
selectInput("x", "Select X Variable", choices = c("Academic_Yr", "Campus", "Category"), selected = "Academic_Yr"),
),
box(
plotOutput("plot", width = "500px", height = "400px"))
)
)
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
UC_admit %>%
filter(pop=input$x) %>%
ggplot(aes(x=Ethnicity, fill=Ethnicity))+
geom_bar()
})
}
shinyApp(ui, server)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(tidyverse)
library(shiny)
library(shinydashboard)
require(janitor)
library(palmerpenguins)
wolves <- read_csv("data/wolves_data/wolves_dataset.csv")
wolves %>%
filter(sex!="NA") %>%
ggplot(aes(x=sex, fill=sex))+
geom_bar()+
facet_wrap(~pop)
ui <- dashboardPage(
dashboardHeader(title = "Sex Composition by Wolf Population"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(width = 3,
selectInput("x", "Select Population", choices=unique(wolves$pop)), hr(),
), # close the first box
box(width = 7,
plotOutput("plot", width = "600px", height = "400px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
session$onSessionEnded(stopApp) #automatically stop the app when we close it
output$plot <- renderPlot({
wolves %>%
filter(sex!="NA") %>%
filter(pop==input$x) %>%
ggplot(aes(x = sex, fill = sex)) +
geom_bar()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title="UC_admissions"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(
selectInput("x", "Select X Variable", choices = c("Academic_Yr", "Campus", "Category"), selected = "Academic_Yr"),
),
box(
plotOutput("plot", width = "500px", height = "400px"))
)
)
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
UC_admit %>%
filter(pop=input$x) %>%
ggplot(aes(x=Ethnicity, fill=Ethnicity))+
geom_bar()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title="UC_admissions"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(
selectInput("x", "Select X Variable", choices = c(unique(UC_admit$Campus)), hr()),
),
box(
selectInput("y","Select Y Variable",choices = c(unique(UC_admit$Academic_Yr), hr()))
)
box(
ui <- dashboardPage(
dashboardHeader(title="UC_admissions"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(
selectInput("x", "Select X Variable", choices = c(unique(UC_admit$Campus)), hr()),
),
box(
selectInput("y","Select Y Variable",choices = c(unique(UC_admit$Academic_Yr), hr()))
),
box(
plotOutput("plot", width = "500px", height = "400px"))
)
)
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
UC_admit %>%
filter(p=input$x) %>%
ggplot(aes(x=Ethnicity, fill=Ethnicity))+
geom_bar()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title="UC_admissions"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(
selectInput("x", "Select X Variable", choices = c(unique(UC_admit$Campus)), hr()),
),
box(
selectInput("y","Select Y Variable",choices = c(unique(UC_admit$Academic_Yr), hr()))
),
box(
plotOutput("plot", width = "500px", height = "400px"))
)
)
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
UC_admit %>%
filter(Category=="Asmits") %>%
group_by(Academic_Yr) %>%
ggplot(aes(x=Ethnicity, y=FilteredCountFR,fill=Ethnicity))+
geom_COL()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title="UC_admissions"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(
selectInput("x", "Select X Variable", choices = c(unique(UC_admit$Campus)), hr()),
),
box(
selectInput("y","Select Y Variable",choices = c(unique(UC_admit$Academic_Yr), hr()))
),
box(
plotOutput("plot", width = "500px", height = "400px"))
)
)
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
UC_admit %>%
filter(Category=="Asmits") %>%
group_by(Academic_Yr) %>%
ggplot(aes(x=Ethnicity, y=FilteredCountFR,fill=Ethnicity))+
geom_col()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title="UC_admissions"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(
selectInput("x", "Select X Variable", choices = c(unique(UC_admit$Campus)), hr()),
),
box(
selectInput("y","Select Y Variable",choices = c(unique(UC_admit$Academic_Yr), hr()))
),
box(
plotOutput("plot", width = "500px", height = "400px"))
)
)
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
UC_admit %>%
filter(Category=="Admits") %>%
group_by(Academic_Yr) %>%
ggplot(aes(x=Ethnicity, y=FilteredCountFR,fill=Ethnicity))+
geom_col()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title="UC_admissions"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(
selectInput("x", "Select X Variable", choices = c(unique(UC_admit$Campus)), hr()),
),
box(
selectInput("y","Select Y Variable",choices = c(unique(UC_admit$Academic_Yr), hr()))
),
box(
plotOutput("plot", width = "500px", height = "400px"))
)
)
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
UC_admit %>%
filter(Campus==input$x & Academic_Yr==input$y) %>%
group_by(Academic_Yr) %>%
ggplot(aes(x=Ethnicity, y=FilteredCountFR,fill=Ethnicity))+
geom_col()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title="UC_admissions"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(
selectInput("x", "Select X Variable", choices = c(unique(UC_admit$Campus)), hr()),
),
box(
selectInput("y","Select Y Variable",choices = c(unique(UC_admit$Academic_Yr), hr()))
),
box(
plotOutput("plot", width = "500px", height = "400px"))
)
)
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
UC_admit %>%
filter(Campus==input$x & Academic_Yr==input$y) %>%
group_by(Academic_Yr) %>%
ggplot(aes(x=Ethnicity, y=FilteredCountFR,fill=Ethnicity))+
geom_col()+
coord_flip()
})
}
shinyApp(ui, server)
View(UC_admit)
ui <- dashboardPage(
dashboardHeader(title="UC_admissions"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(
selectInput("x", "Select Campus", choices = c(unique(UC_admit$Campus)), hr()),
),
box(
selectInput("y","Select Year",choices = c(unique(UC_admit$Academic_Yr), hr()))
),
box(
selectInput("z","Select Applicant",choices = c(unique(UC_admit$Category), hr()))
),
box(
plotOutput("plot", width = "500px", height = "400px"))
)
)
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
UC_admit %>%
filter(Campus==input$x & Academic_Yr==input$y & Category==input==z) %>%
ui <- dashboardPage(
dashboardHeader(title="UC_admissions"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(
selectInput("x", "Select Campus", choices = c(unique(UC_admit$Campus)), hr()),
),
box(
selectInput("y","Select Year",choices = c(unique(UC_admit$Academic_Yr), hr()))
),
box(
selectInput("z","Select Applicant",choices = c(unique(UC_admit$Category), hr()))
),
box(
plotOutput("plot", width = "500px", height = "400px"))
)
)
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
UC_admit %>%
filter(Campus==input$x & Academic_Yr==input$y & Category==input$z) %>%
group_by(Academic_Yr) %>%
ggplot(aes(x=Ethnicity, y=FilteredCountFR,fill=Ethnicity))+
geom_col()+
coord_flip()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title="UC_admissions"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(
selectInput("x", "Select Campus", choices = c(unique(UC_admit$Campus)), hr()),
),
box(
selectInput("y","Select Year",choices = c(unique(UC_admit$Academic_Yr), hr()))
),
box(
selectInput("z","Select Applicant",choices = c(unique(UC_admit$Category), hr()))
),
box(
plotOutput("plot", width = "300px", height = "400px"))
)
)
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
UC_admit %>%
filter(Campus==input$x & Academic_Yr==input$y & Category==input$z) %>%
group_by(Academic_Yr) %>%
ggplot(aes(x=Ethnicity, y=FilteredCountFR,fill=Ethnicity))+
geom_col()+
coord_flip()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title="UC_admissions"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(
selectInput("x", "Select Campus", choices = c(unique(UC_admit$Campus)), hr()),
),
box(
selectInput("y","Select Year",choices = c(unique(UC_admit$Academic_Yr), hr()))
),
box(
selectInput("z","Select Applicant",choices = c(unique(UC_admit$Category), hr()))
),
box(
plotOutput("plot", width = "400px", height = "400px"))
)
)
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
UC_admit %>%
filter(Campus==input$x & Academic_Yr==input$y & Category==input$z) %>%
group_by(Academic_Yr) %>%
ggplot(aes(x=Ethnicity, y=FilteredCountFR,fill=Ethnicity))+
geom_col()+
coord_flip()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title="UC_admissions"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(
selectInput("x", "Select Campus", choices = c(unique(UC_admit$Campus)), hr()),
),
box(
selectInput("y","Select Ethnicity",choices = c(unique(UC_admit$Ethnicity), hr()))
),
box(
selectInput("z","Select Applicant",choices = c(unique(UC_admit$Category), hr()))
),
box(
plotOutput("plot", width = "400px", height = "400px"))
)
)
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
UC_admit %>%
filter(Campus==input$x & Ethnicity==input$y & Category==input$z) %>%
group_by(Academic_Yr) %>%
ggplot(aes(x=Academic_Yr, y=FilteredCountFR,fill=Ethnicity))+
geom_col()+
coord_flip()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title="UC_admissions"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(
selectInput("x", "Select Campus", choices = c(unique(UC_admit$Campus)), hr()),
),
box(
selectInput("y","Select Ethnicity",choices = c(unique(UC_admit$Ethnicity), hr()))
),
box(
selectInput("z","Select Applicant",choices = c(unique(UC_admit$Category), hr()))
),
box(
plotOutput("plot", width = "400px", height = "400px"))
)
)
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
UC_admit %>%
mutate(Academic_Yr=as.factor(Academic_Yr)) %>%
filter(Campus==input$x & Ethnicity==input$y & Category==input$z) %>%
group_by(Academic_Yr) %>%
ggplot(aes(x=Academic_Yr, y=FilteredCountFR,fill=Ethnicity))+
geom_col()+
coord_flip()
})
}
shinyApp(ui, server)
library(shinydashboard)
